# Parser methods: pdfPlumber pyTesseract linux_pdftotext
# You can place OCR methods here to test directly but this is for text extraction methods
[Parser]
method = pdfPlumber

# OCR fallback choices:  pyTesseract ocrmypdf
# place OCR fallback parsing methods here (this is for when text based parsing fails)
[OCR]
fallback = pyTesseract

# AI methods: gpt llama Ollama Ollama/Schema
# Ollama: Solid AI and always json output (Ensure AI Model is chosen)
# gpt: AI gives output, doesn't make JSON 100% of the time
# Ollama/Verification runs multiple times
# llama: old and slow! don't use
[AI]
method = Ollama/Schema

# Ensure you have a model downloaded and insert the name here (Must have Ollama installed too)
    # to download go to "https://ollama.com/library"
    # find a model, grab the model name and parameter amount ex: "qwen2.5-coder:3b"
    # run "ollama run <your_model_name>" in the command line
# AI model methods we've used: qwen2.5-coder:3b, qwen2.5-coder:7b
[Ollama Model]
model = qwen2.5-coder:3b

# Verification
# active - set to True if you want to run with verification else False
# reruns is the number of times to give the same prompt to the llm and select the most average one of the group forthe final output
# threshold is the minimum similarity the chosen output must have to be acceptable
[Verification]
active = True
reruns = 3
threshold = 0.9
